# Includes:
#       - string_eq
#       - string_neq
#       - string_lt
#       - string_gt
#       - string_le
#       - string_ge
#
# ASC for string compare operations
#
# Stack:
#       - top of the stack
#       - old display register value
#       - return
#       - length
#       - address of source string (s2)
#       - address of destination string (s1)
#
# All built ins are at level 0
#
# TODO - gt ge lt le are currently broken

# String Equal
# Returns 1 on equal, 0 on not equal
# Return value is in -3[0]
string_eq
        PUSH    -3[0]   # 0[0] - length
        PUSH    -4[0]   # 1[0] - source pointer
        PUSH    -5[0]   # 2[0] - destination pointer
        CONSTI  0       # 3[0] - counter

string_eq_loop
        PUSH    3[0]
        PUSH    0[0]
        LTI             # done if !(counter < length)
        IFZ     string_eq_d_eq
        PUSH    2[0]    # push destination*
        PUSH    3[0]    # push counter
        ADDI            # (destination + counter)*
        PUSHI           # grab the value
        PUSH    1[0]    # push source*
        PUSH    3[0]    # push counter
        ADDI            # (source + counter)*
        PUSHI           # grab the value
        EQI
        IFZ     string_eq_d_neq
        
        # counter--
        PUSH    3[0]
        CONSTI  1
        ADDI
        POP     3[0]
        GOTO    string_eq_loop
                
string_eq_d_eq
        CONSTI  1
        POP     -3[0]
        ADJUST  -4
        RET     0
string_eq_d_neq
        CONSTI  0
        POP     -3[0]
        ADJUST  -4
        RET     0

# String Not Equal
# Returns 1 on not equal, 0 on equal
# Return value is in -3[0]
string_neq
        PUSH    -3[0]   # 0[0] - length
        PUSH    -4[0]   # 1[0] - source pointer
        PUSH    -5[0]   # 2[0] - destination pointer
        CONSTI  0       # 3[0] - counter

string_neq_loop
        PUSH    3[0]
        PUSH    0[0]
        LTI             # done if !(counter < length)
        IFZ     string_neq_d_eq
        PUSH    2[0]    # push destination*
        PUSH    3[0]    # push counter
        ADDI            # (destination + counter)*
        PUSHI           # grab the value
        PUSH    1[0]    # push source*
        PUSH    3[0]    # push counter
        ADDI            # (source + counter)*
        PUSHI           # grab the value
        EQI
        IFZ     string_neq_d_neq
        
        # counter--
        PUSH    3[0]
        CONSTI  1
        ADDI
        POP     3[0]
        GOTO    string_neq_loop
                
string_neq_d_eq
        CONSTI  0
        POP     -3[0]
        ADJUST  -4
        RET     0
string_neq_d_neq
        CONSTI  1
        POP     -3[0]
        ADJUST  -4
        RET     0

# String Greater Than
# Returns 1 on greater than, 0 on not greater than
# Return value is in -3[0]
string_gt
        PUSH    -3[0]   # 0[0] - length
        PUSH    -4[0]   # 1[0] - source pointer
        PUSH    -5[0]   # 2[0] - destination pointer
        CONSTI  0       # 3[0] - counter

string_gt_loop
        PUSH    3[0]
        PUSH    0[0]
        LTI             # done if !(counter < length)
        IFZ     string_gt_d_gt
        PUSH    2[0]    # push destination*
        PUSH    3[0]    # push counter
        ADDI            # (destination + counter)*
        PUSHI           # grab the value
        PUSH    1[0]    # push source*
        PUSH    3[0]    # push counter
        ADDI            # (source + counter)*
        PUSHI           # grab the value

        LTI
        IFNZ     string_gt_d_ngt
        
        # counter--
        PUSH    3[0]
        CONSTI  1
        ADDI
        POP     3[0]
        GOTO    string_gt_loop
                
string_gt_d_gt
        CONSTI  1
        POP     -3[0]
        ADJUST  -4
        RET     0
string_gt_d_ngt
        CONSTI  0
        POP     -3[0]
        ADJUST  -4
        RET     0

# String Less Than
# Returns 1 on less than, 0 on not less than
# Return value is in -3[0]
string_lt
        PUSH    -3[0]   # 0[0] - length
        PUSH    -4[0]   # 1[0] - source pointer
        PUSH    -5[0]   # 2[0] - destination pointer
        CONSTI  0       # 3[0] - counter

string_lt_loop
        PUSH    3[0]
        PUSH    0[0]
        LTI             # done if !(counter < length)
        IFZ     string_lt_d_lt
        PUSH    2[0]    # push destination*
        PUSH    3[0]    # push counter
        ADDI            # (destination + counter)*
        PUSHI           # grab the value
        PUSH    1[0]    # push source*
        PUSH    3[0]    # push counter
        ADDI            # (source + counter)*
        PUSHI           # grab the value

        GTI
        IFNZ     string_lt_d_nlt
        
        # counter--
        PUSH    3[0]
        CONSTI  1
        ADDI
        POP     3[0]
        GOTO    string_lt_loop
                
string_lt_d_lt
        CONSTI  1
        POP     -3[0]
        ADJUST  -4
        RET     0
string_lt_d_nlt
        CONSTI  0
        POP     -3[0]
        ADJUST  -4
        RET     0

# String Greater Than Or Equal
# Returns 1 on greater than, 0 on not greater than
# Return value is in -3[0]
string_ge
        PUSH    -3[0]   # 0[0] - length
        PUSH    -4[0]   # 1[0] - source pointer
        PUSH    -5[0]   # 2[0] - destination pointer
        CONSTI  0       # 3[0] - counter

string_ge_loop
        PUSH    3[0]
        PUSH    0[0]
        LTI             # done if !(counter < length)
        IFZ     string_ge_d_ge
        PUSH    2[0]    # push destination*
        PUSH    3[0]    # push counter
        ADDI            # (destination + counter)*
        PUSHI           # grab the value
        PUSH    1[0]    # push source*
        PUSH    3[0]    # push counter
        ADDI            # (source + counter)*
        PUSHI           # grab the value

        GTI
        IFZ     string_ge_d_nge
        
        # counter--
        PUSH    3[0]
        CONSTI  1
        ADDI
        POP     3[0]
        GOTO    string_ge_loop
                
string_ge_d_ge
        CONSTI  1
        POP     -3[0]
        ADJUST  -4
        RET     0
string_ge_d_nge
        CONSTI  0
        POP     -3[0]
        ADJUST  -4
        RET     0

# String Less Than Or Equal
# Returns 1 on less than, 0 on not less than
# Return value is in -3[0]
string_le
        PUSH    -3[0]   # 0[0] - length
        PUSH    -4[0]   # 1[0] - source pointer
        PUSH    -5[0]   # 2[0] - destination pointer
        CONSTI  0       # 3[0] - counter

string_le_loop
        PUSH    3[0]
        PUSH    0[0]
        LTI             # done if !(counter < length)
        IFZ     string_le_d_le
        PUSH    2[0]    # push destination*
        PUSH    3[0]    # push counter
        ADDI            # (destination + counter)*
        PUSHI           # grab the value
        PUSH    1[0]    # push source*
        PUSH    3[0]    # push counter
        ADDI            # (source + counter)*
        PUSHI           # grab the value

        LTI
        IFZ     string_le_d_nle
        
        # counter--
        PUSH    3[0]
        CONSTI  1
        ADDI
        POP     3[0]
        GOTO    string_le_loop
                
string_le_d_le
        CONSTI  1
        POP     -3[0]
        ADJUST  -4
        RET     0
string_le_d_nle
        CONSTI  0
        POP     -3[0]
        ADJUST  -4
        RET     0
