#
# ASC for math operations
#
# Stack:
#       - top of stack
#       - old display register value
#       - return address
#       - real value
#
# All built ins are at level 0
#
# Return at the location of value
#

# Cosine
cos_func
        CONSTR  1.57079633
        PUSH    -3[0]
        SUBR
        CALL    0,sin_func
        POP     -3[0]
        ret     0

# Tangent
tan_func
        PUSH    -3[0]
        CALL    0,sin_func
        PUSH    -3[0]
        CALL    0,cos_func
        DIVR
        POP     -3[0]
        RET     0
# Sine
sin_func
        PUSH    -3[0]   # 0[0] - real value
        CONSTI  0       # 1[0] - loop counter (n)
        PUSH    -3[0]   # 2[0] - term (real)
        PUSH    -3[0]   # 3[0] - sum (real)

        # Make real value the right size
        PUSH   0[0]
        DUP
        CONSTR 6.283185307179586476925286766559005768394338798750
        DIVR
        RTOI
        ITOR            # LOL'D
        CONSTR 6.283185307179586476925286766559005768394338798750
        MULR
        SUBR
        DUP
        DUP
        POP     0[0]
        POP     2[0]
        POP     3[0]
        
#     for(int n=1; n<10; ++n)
sin_func_loop
        PUSH    1[0]
        CONSTI  1
        ADDI
        DUP
        POP     1[0]
        CONSTI  10
        LTI
        IFZ     sin_func_d
#     term *= x*x / ( 2*n * (2*n+1) );
        PUSH    0[0]
        DUP
        MULR

        CONSTI  1
        CONSTI  2
        PUSH    1[0]
        MULI
        ADDI
        CONSTI  2
        PUSH    1[0]
        MULI
        MULI
        ITOR

        DIVR

        PUSH    2[0]
        MULR
        POP     2[0]    # update

#     sum += n%2 ? -term : term;
        PUSH    1[0]
        CONSTI  2
        MOD
        IFZ     sin_func_p_u

        PUSH    2[0]
        CONSTR  -1
        MULR
        PUSH    3[0]
        ADDR
        POP     3[0]
        GOTO    sin_func_loop
sin_func_p_u
        PUSH    2[0]
        PUSH    3[0]
        ADDR
        POP     3[0]
        GOTO    sin_func_loop        
sin_func_d
#     return sum;
       PUSH    3[0]
       POP     -3[0]
       ADJUST  -4
       RET     0
