# Includes:
#       - succ
#       - pred
#       - ord
#       - chr
#
# ASC for scalar operations
#
# Stack:
#       - top of stack
#       - old display register value
#       - return address
#	- data type (from symbol table: int - 0, char - 1, bool - 2)
#       - ordinal value
#
# All built ins are at level 0
#
# Return at the location of value
#
        GOTO    succ_fail
# succ(x) - successor function, determines the next value or symbol in the set
succ
	PUSH -3[0]		# the data type we are working with
	IFZ	succ_int_type # if zero the type is an int
	
	PUSH -3[0]		# the data type we are working with
	CONSTI 1			# push 1 onto the stack
	SUBI					# subtract 1
	IFZ succ_char_type	# if now zero the type is a char
	
	PUSH -3[0]		# the data type we are working with
	CONSTI 2			# push 1 onto the stack
	SUBI					# subtract 1
	IFZ succ_bool_type	# if now zero the type is a bool
	
	GOTO succ_func_error	# else there is an error
	
succ_int_type
	PUSH -4[0]		# get the ints value
	CONSTI 1			# push 1 onto the stack
	ADDI					# increment the value by 1
	POP -4[0]			# replace original value
	
	RET 0

succ_char_type
	PUSH -4[0]		# get the chars value
	CONSTI 1			# push 1 onto the stack
	ADDI					# increment the value by 1
	
	CONSTI 127		# push largest possible ascii value
	GTI             
        IFNZ succ_func_error    # there is no ascii successor to a DEL character

	PUSH -4[0]		# get the chars value
	CONSTI 1			# push 1 onto the stack
	ADDI					# increment the value by 1
	POP -4[0]			# replace the original value
	
	RET 0

succ_bool_type
	PUSH -4[0]		# get the bools value
	CONSTI 1			# push 1 onto the stack
	ADDI					# increment the value by 1
	
	CONSTI 1		# push largest possible bool value "true"
	GTI 
        IFNZ succ_func_error	# there is no successor to "true"
	
	PUSH -4[0]		# get the chars value
	CONSTI 1			# push 1 onto the stack
	ADDI					# increment the value by 1
	POP -4[0]			# replace the original value
	
	RET 0

succ_func_error
	CONSTI 0		# push 0 onto stack
	POP -4[0]		# replace original value with null
	
	RET 0

# pred(x) - predecessor function, determines the previous value or symbol in the set
pred
	PUSH -3[0]		# the data type we are working with
	IFZ	pred_int_type # if zero the type is an int
	
	PUSH -3[0]		# the data type we are working with
	CONSTI 1			# push 1 onto the stack
	SUBI					# subtract 1
	IFZ pred_char_type	# if now zero the type is a char
	
	PUSH -3[0]		# the data type we are working with
	CONSTI 2			# push 1 onto the stack
	SUBI					# subtract 1
	IFZ pred_bool_type	# if now zero the type is a bool
	
	GOTO pred_func_error	# else there is an error
	
pred_int_type
	PUSH -4[0]		# get the ints value
	CONSTI 1			# push 1 onto the stack
	SUBI					# reduce the value by 1
	POP -4[0]			# replace original value
	
	RET 0

pred_char_type
	PUSH -4[0]		# get the chars value
	CONSTI 1			# push 1 onto the stack
	SUBI					# reduce the value by 1
	
	CONSTI 0		# push smallest possible ascii value
	LTI
    IFNZ succ_func_error	# there is no ascii predecessor to a Null character

	PUSH -4[0]		# get the chars value
	CONSTI 1			# push 1 onto the stack
	SUBI					# reduce the value by 1
	POP -4[0]			# replace the original value
	
	RET 0

pred_bool_type
	PUSH -4[0]		# get the bools value
	CONSTI 1			# push 1 onto the stack
	SUBI					# reduce the value by 1
	
	CONSTI 0		# push smallest possible bool value "false"
	LTI
    IFNZ succ_func_error	# there is no predecessor to "false"
	
	PUSH -4[0]		# get the chars value
	CONSTI 1			# push 1 onto the stack
	SUBI					# reduce the value by 1
	POP -4[0]			# replace the original value
	
	RET 0

pred_func_error
	CONSTI 0		# push 0 onto stack
	POP -4[0]		# replace original value with null
	
	RET 0
	
# ord(x) - ordinal function, returns the ASCII value of the requested character as an int
ord
	CONSTI 0		# push 0 onto stack
	POP -3[0]		# change the data type to int at original location
	
	RET 0			# the ordinal value is unchanged in asc representation
	
# chr(x) - character position, returns character associated with the ASCII value of x
chr
	PUSH    -3[0]		# push 0 onto stack
	POP -3[0]		# change the data type to char at original location
	
	RET 0			# the ordinal value is unchanged in asc representation

pred_fail
        CONSTI  82
	WRITEC
	CONSTI 117
	WRITEC
	CONSTI 110
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 105
	WRITEC
	CONSTI 109
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 69
	WRITEC
	CONSTI 120
	WRITEC
	CONSTI 99
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 112
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 105
	WRITEC
	CONSTI 111
	WRITEC
	CONSTI 110
	WRITEC
	CONSTI 58
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 67
	WRITEC
	CONSTI 97
	WRITEC
	CONSTI 110
	WRITEC
	CONSTI 110
	WRITEC
	CONSTI 111
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 97
	WRITEC
	CONSTI 107
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 104
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 112
	WRITEC
	CONSTI 114
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 100
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 99
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 115
	WRITEC
	CONSTI 115
	WRITEC
	CONSTI 111
	WRITEC
	CONSTI 114
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 111
	WRITEC
	CONSTI 102
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 104
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 102
	WRITEC
	CONSTI 105
	WRITEC
	CONSTI 114
	WRITEC
	CONSTI 115
	WRITEC
        CONSTI 116
        WRITEC
	CONSTI 32
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 108
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 109
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 110
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 111
	WRITEC
	CONSTI 102
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 97
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 115
	WRITEC
	CONSTI 99
	WRITEC
	CONSTI 97
	WRITEC
	CONSTI 108
	WRITEC
	CONSTI 97
	WRITEC
	CONSTI 114
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 108
	WRITEC
	CONSTI 105
	WRITEC
	CONSTI 115
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 46
	WRITEC
        CONSTI 10
        WRITEC
        
        STOP
succ_fail
        CONSTI  82
	WRITEC
	CONSTI 117
	WRITEC
	CONSTI 110
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 105
	WRITEC
	CONSTI 109
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 69
	WRITEC
	CONSTI 120
	WRITEC
	CONSTI 99
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 112
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 105
	WRITEC
	CONSTI 111
	WRITEC
	CONSTI 110
	WRITEC
	CONSTI 58
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 67
	WRITEC
	CONSTI 97
	WRITEC
	CONSTI 110
	WRITEC
	CONSTI 110
	WRITEC
	CONSTI 111
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 97
	WRITEC
	CONSTI 107
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 104
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 115
	WRITEC
	CONSTI 117
	WRITEC
	CONSTI 99
	WRITEC
	CONSTI 99
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 115
	WRITEC
	CONSTI 115
	WRITEC
	CONSTI 111
	WRITEC
	CONSTI 114
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 111
	WRITEC
	CONSTI 102
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 104
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 108
	WRITEC
	CONSTI 97
	WRITEC
	CONSTI 115
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 108
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 109
	WRITEC
	CONSTI 101
	WRITEC
	CONSTI 110
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 111
	WRITEC
	CONSTI 102
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 97
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 115
	WRITEC
	CONSTI 99
	WRITEC
	CONSTI 97
	WRITEC
	CONSTI 108
	WRITEC
	CONSTI 97
	WRITEC
	CONSTI 114
	WRITEC
	CONSTI 32
	WRITEC
	CONSTI 108
	WRITEC
	CONSTI 105
	WRITEC
	CONSTI 115
	WRITEC
	CONSTI 116
	WRITEC
	CONSTI 46
	WRITEC
        CONSTI 10
        WRITEC

        STOP
