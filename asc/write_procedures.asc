# Includes:
#       - write
#       - writeln
#
# ASC for writing to stdout
#
# Stack:
#       - top of the stack
#       - old display register value
#       - return address
#       - number of arguments
#       - see below
#
# All built ins are at level 0
# please report any bugs to /dev/null

# write int/bool
write_int
        PUSH    -3[0]   # 0[0] - the number
        CONSTI  0       # 1
        CONSTI  0       # 2
        CONSTI  0       # 3
        CONSTI  0       # 4
        CONSTI  0       # 5
        CONSTI  0       # 6
        CONSTI  0       # 7 so lazy (I copied over this code)

        PUSH    0[0]
        POP     6[0]    # num = num
        CONSTI  0
        POP     5[0]    # i = 0
        CONSTI  0
        POP     7[0]

        PUSH    6[0]
        CONSTI  0
        LTI
        IFZ     write_p_int_f
        CONSTI  1       # i = 1
        POP     7[0]
        PUSH    6[0]
        CONSTI  -1
        MULI
        POP     6[0]
        
##
# for(int i = 0; num > 0; stack = num%10, i++)
write_p_int_f
        PUSH    6[0]
        CONSTI  10
        MOD
        CONSTI  48
        ADDI            # convert to ASCII value
        PUSH    6[0]
        CONSTI  10
        DIVI
        POP     6[0]    # num = num/10

        PUSH    5[0]
        CONSTI  1
        ADDI
        POP     5[0]

        PUSH    6[0]
        IFZ     write_p_int_f3
        GOTO    write_p_int_f

write_p_int_f3
        PUSH    7[0]
        IFZ     write_p_int_f2
        CONSTI  45
        WRITEC

# for (; i > 0; writec, i--)
write_p_int_f2
        PUSH    5[0]
        CONSTI  0
        GTI
        IFZ     write_p_int_d
        WRITEC

        PUSH    5[0]
        CONSTI  -1
        ADDI
        POP     5[0]

        GOTO    write_p_int_f2
write_p_int_d        
        ADJUST  -8
        RET     0
#######        

write_real
        PUSH    -3[0]
        WRITER
        RET     0

write_char
        PUSH    -3[0]
        WRITEC
        RET     0
#############
write_string
        PUSH    -3[0]   # 0[0] - Length
        PUSH    -4[0]   # 1[0] - &string
        CONSTI  0       # 2[0] - Counter
write_p_str
        PUSH    2[0]
        PUSH    0[0]
        LTI             # done if !(counter < length)
        IFZ     write_p_str_d

        PUSH    1[0]
        PUSH    2[0]
        ADDI
        PUSHI
        WRITEC

        # counter++
        PUSH    2[0]
        CONSTI  1
        ADDI
        POP     2[0]
        GOTO    write_p_str
write_p_str_d
        ADJUST  -3
        RET     0
###############
writeln
        CONSTI  10
        WRITEC
        RET     0
