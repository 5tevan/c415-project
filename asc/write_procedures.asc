# Includes:
#       - write_proc
#       - writeln_proc
#
# ASC for writing to stdout
#
# Stack:
#       - top of the stack
#       - old display register value
#       - return address
#       - number of arguments
#       - see below
#
# All built ins are at level 0
# please report any bugs to /dev/null

#
# How write works: top of da stack; argc; (type arg_val | arg)*
#                    |  type     |     arg_val     |      arg
#              Char: | TC_CHAR   |       --        |      'a'
#               Int: | TC_INT    |       --        |      '4'
#              Real: | TC_REAL   |       --        |     '1.0'
#              Bool: | TC_BOOL   |       --        |      '0'
#            String: | TC_STRING |  length (high)  |    &string
#
# (So you push the arg, then the type when you call this)

# write
write_proc
        PUSH    -3[0]   # 0[0] - Number of args
        PUSHA   -4[0]   # 1[0] - Address of start of args
        CONSTI  -1      # 2[0] - Counter to walk through args
        CONSTI  0       # 3[0] - current location in &string (i < 4[0])
        CONSTI  0       # 4[0] - &string + high
        
        # We will print args as we see them
        # for (i = 0; i < num_args; i++)
write_loop      
        # i++ (we start the counter at -1)
        PUSH    2[0]
        CONSTI  1
        ADDI
        POP     2[0]
        
        PUSH    2[0]    # extra access so I can read this easily
        PUSH    0[0]
        LTI

        IFZ     write_d

        # Read type
        PUSH    1[0]
        PUSHI
        DUP
        IFZ    write_p_int    # TC_INT 0
        CONSTI  -1
        ADDI
        DUP
        IFZ    write_p_real   # TC_REAL 1
        CONSTI  -1
        ADDI
        DUP
        IFZ    write_p_char   # TC_CHAR 2
        CONSTI  -1
        ADDI
        IFZ    write_p_bool  # TC_BOOL 3
# must be a string at this point  TC_STRING 4
        # reset string counter
        PUSH    1[0]
        CONSTI  -2
        ADDI
        PUSHI           # got &string
        DUP
        POP     3[0]
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI           # got high
        ADDI
        POP     4[0]
write_p_str
        PUSH    3[0]
        PUSH    4[0]
        LTI             # done if !(counter < length)

        IFZ     write_p_str_d
        PUSH    3[0]
        PUSHI
        WRITEC

        # pointer++
        PUSH    3[0]
        CONSTI  1
        ADDI
        POP     3[0]
        GOTO    write_p_str
        
write_p_str_d
        PUSH    1[0]
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        SUBI            # go past string length
        CONSTI  -1      # go past type
        ADDI
        POP     1[0]
        GOTO    write_loop
write_p_int
        ADJUST  -1      # get rid of the unneeded DUP value
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        WRITEI
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    write_loop
write_p_real
        ADJUST  -1      # get rid of the unneeded DUP value
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        WRITER
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    write_loop
write_p_char
        ADJUST  -1      # get rid of the unneeded DUP value
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        WRITEC
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    write_loop
write_p_bool
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        WRITEI
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    write_loop

write_d
        ADJUST  -5
        RET     0

# writeln
writeln_proc
        PUSH    -3[0]   # 0[0] - Number of args
        PUSHA   -4[0]   # 1[0] - Address of start of args
        CONSTI  -1      # 2[0] - Counter to walk through args
        CONSTI  0       # 3[0] - current location in &string (i < 4[0])
        CONSTI  0       # 4[0] - &string + high
        
        # We will print args as we see them
        # for (i = 0; i < num_args; i++)
writeln_loop      
        # i++ (we start the counter at -1)
        PUSH    2[0]
        CONSTI  1
        ADDI
        POP     2[0]
        
        PUSH    2[0]    # extra access so I can read this easily
        PUSH    0[0]
        LTI

        IFZ     writeln_d

        # Read type
        PUSH    1[0]
        PUSHI
        DUP
        IFZ    writeln_p_int    # TC_INT 0
        CONSTI  -1
        ADDI
        DUP
        IFZ    writeln_p_real   # TC_REAL 1
        CONSTI  -1
        ADDI
        DUP
        IFZ    writeln_p_char   # TC_CHAR 2
        CONSTI  -1
        ADDI
        IFZ    writeln_p_bool  # TC_BOOL 3
# must be a string at this point  TC_STRING 4
        # reset string counter
        PUSH    1[0]
        CONSTI  -2
        ADDI
        PUSHI           # got &string
        DUP
        POP     3[0]
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI           # got high
        ADDI
        POP     4[0]
writeln_p_str
        PUSH    3[0]
        PUSH    4[0]
        LTI             # done if !(counter < length)

        IFZ     writeln_p_str_d
        PUSH    3[0]
        PUSHI
        WRITEC

        # pointer++
        PUSH    3[0]
        CONSTI  1
        ADDI
        POP     3[0]
        GOTO    writeln_p_str
        
writeln_p_str_d
        PUSH    1[0]
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        SUBI            # go past string length
        CONSTI  -1      # go past type
        ADDI
        POP     1[0]
        GOTO    writeln_loop
writeln_p_int
        ADJUST  -1      # get rid of the unneeded DUP value
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        WRITEI
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    writeln_loop
writeln_p_real
        ADJUST  -1      # get rid of the unneeded DUP value
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        WRITER
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    writeln_loop
writeln_p_char
        ADJUST  -1      # get rid of the unneeded DUP value
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        WRITEC
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    writeln_loop
writeln_p_bool
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        WRITEI
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    writeln_loop

writeln_d
        # Namesake '\n'
        CONSTI  10
        WRITEC
        ADJUST  -5
        RET     0
