#
# ASC for writing to stdout
#
# Stack:
#       - top of the stack
#       - old display register value
#       - return address
#       - number of arguments
#       - see below
#
# All built ins are at level 0
#

#
# How write works: top of da stack; argc; (type arg_val | arg)*
#                    |  type     |     arg_val     |      arg
#              Char: | TC_CHAR   |       --        |      'a'
#               Int: | TC_INT    |       --        |      '4'
#              Real: | TC_REAL   |       --        |     '1.0'
#              Bool: | TC_BOOL   |       --        |      '0'
#            String: | TC_STRING |  length (high)  |  's' 't' 'r'
#

# write
write_proc

# writeln
writeln_proc
        PUSH    -3[0]   # 0[0] - Number of args
        PUSHA   -4[0]   # 1[0] - Address of start of args
        CONSTI  1       # 2[0] - Counter to walk through args
        CONSTI  0       # 3[0] - Counter inside strings
        CONSTI  0       # 4[0] - Storage for parsing strings
        
        # We will print args as we see them
        # for (i = 0; i < num_args; i++)
writeln_loop        
        PUSH    2[0]
        PUSH    0[0]
        LTI
        IFZ     writeln_d

        # Read type
        PUSH   1[0]
        PUSHI
        DUP
        IFZ    writeln_p_int
        CONSTI -1
        ADDI
        DUP
        IFZ    writeln_p_real
        CONSTI -1
        ADDI
        DUP
        IFZ    writeln_p_char
        CONSTI -1
        ADDI
        IFZ    write_ln_p_bool
# must be a string at this point
        PUSH   1[0]
        CONSTI -1
        ADDI
        PUSHI
        

writeln_d
        # Namesake '\n'
        CONSTI  10
        WRITEC
        ADJUST  -4
        RET     0
