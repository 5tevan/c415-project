# Includes:
#       - read
#       - readln
#
# ASC for reading from stdin
#
# Stack:
#       - top of the stack
#       - old display register value
#       - return address
#       - address to be written to
#
# All built ins are at level 0
#

# Call readln with the address of where you'd like stuff to be written
# you'll also need to include the types and stuff - please read the
# writeln documentation for information on calling readln. It's
# basically the same, except you pass the address for everything (not
# just strings), instead of the value.

#########
# Something about being aware of EOF here.
# Also, how should we interpret newlines?
# Maybe remove one of these...

# read
read
        PUSH    -3[0]   # 0[0] - Number of args
        PUSHA   -4[0]   # 1[0] - Address of start of args
        CONSTI  -1      # 2[0] - Counter to walk through args
        CONSTI  0       # 3[0] - current location in &string (i < 4[0])
        CONSTI  0       # 4[0] - &string + high
        
        # We will print args as we see them
        # for (i = 0; i < num_args; i++)
read_loop      
        # i++ (we start the counter at -1)
        PUSH    2[0]
        CONSTI  1
        ADDI
        POP     2[0]
        
        PUSH    2[0]    # extra access so I can read this easily
        PUSH    0[0]
        LTI

        IFZ     read_d

        # Read type
        PUSH    1[0]
        PUSHI
        DUP
        IFZ    read_p_int    # TC_INT 0
        CONSTI  -1
        ADDI
        DUP
        IFZ    read_p_real   # TC_REAL 1
v        CONSTI  -1
        ADDI
        DUP
        IFZ    read_p_char   # TC_CHAR 2
        CONSTI  -1
        ADDI
        IFZ    read_p_bool  # TC_BOOL 3
# must be a string at this point  TC_STRING 4
        # reset string counter
        PUSH    1[0]
        CONSTI  -2
        ADDI
        PUSHI           # got &string
        DUP
        POP     3[0]
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI           # got high
        ADDI
        POP     4[0]
read_p_str
        PUSH    3[0]
        PUSH    4[0]
        LTI             # done if !(counter < length)

        IFZ     read_p_str_d
        PUSH    3[0]
        READC
        POPI

        # pointer++
        PUSH    3[0]
        CONSTI  1
        ADDI
        POP     3[0]
        GOTO    read_p_str
        
read_p_str_d
        PUSH    1[0]
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        SUBI            # go past string length
        CONSTI  -1      # go past type
        ADDI
        POP     1[0]
        GOTO    read_loop
read_p_int
        ADJUST  -1      # get rid of the unneeded DUP value
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        READI
        POPI
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    read_loop
read_p_real
        ADJUST  -1      # get rid of the unneeded DUP value
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        READR
        POPI
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    read_loop
read_p_char
        ADJUST  -1      # get rid of the unneeded DUP value
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        READC
        POPI
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    read_loop
read_p_bool
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        READI
        POPI
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    read_loop

read_d
        ADJUST  -5
        RET     0

# readln
readln
        PUSH    -3[0]   # 0[0] - Number of args
        PUSHA   -4[0]   # 1[0] - Address of start of args
        CONSTI  -1      # 2[0] - Counter to walk through args
        CONSTI  0       # 3[0] - current location in &string (i < 4[0])
        CONSTI  0       # 4[0] - &string + high
        
        # We will print args as we see them
        # for (i = 0; i < num_args; i++)
readln_loop      
        # i++ (we start the counter at -1)
        PUSH    2[0]
        CONSTI  1
        ADDI
        POP     2[0]
        
        PUSH    2[0]    # extra access so I can read this easily
        PUSH    0[0]
        LTI

        IFZ     readln_d

        # Read type
        PUSH    1[0]
        PUSHI
        DUP
        IFZ    readln_p_int    # TC_INT 0
        CONSTI  -1
        ADDI
        DUP
        IFZ    readln_p_real   # TC_REAL 1
        CONSTI  -1
        ADDI
        DUP
        IFZ    readln_p_char   # TC_CHAR 2
        CONSTI  -1
        ADDI
        IFZ    readln_p_bool  # TC_BOOL 3
# must be a string at this point  TC_STRING 4
        # reset string counter
        PUSH    1[0]
        CONSTI  -2
        ADDI
        PUSHI           # got &string
        DUP
        POP     3[0]
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI           # got high
        ADDI
        POP     4[0]
readln_p_str
        PUSH    3[0]
        PUSH    4[0]
        LTI             # done if !(counter < length)

        IFZ     readln_p_str_d
        PUSH    3[0]
        READC
        POPI

        # pointer++
        PUSH    3[0]
        CONSTI  1
        ADDI
        POP     3[0]
        GOTO    readln_p_str
        
readln_p_str_d
        PUSH    1[0]
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        SUBI            # go past string length
        CONSTI  -1      # go past type
        ADDI
        POP     1[0]
        GOTO    readln_loop
readln_p_int
        ADJUST  -1      # get rid of the unneeded DUP value
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        READI
        POPI
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    readln_loop
readln_p_real
        ADJUST  -1      # get rid of the unneeded DUP value
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        READR
        POPI
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    readln_loop
readln_p_char
        ADJUST  -1      # get rid of the unneeded DUP value
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        READC
        POPI
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    readln_loop
readln_p_bool
        PUSH    1[0]
        CONSTI  -1
        ADDI
        PUSHI
        READI
        POPI
        PUSH    1[0]
        CONSTI  -2      # Go past type and value
        ADDI
        POP     1[0]    # Increment address so we're ready for the next arg
        GOTO    readln_loop

readln_d
        # Namesake '\n'
        CONSTI  10
        WRITEC
        ADJUST  -5
        RET     0

Rerror
        CONSTI  82
        WRITEC  
        CONSTI  69
        WRITEC  
        CONSTI  65
        WRITEC  
        CONSTI  68
        WRITEC  
        CONSTI  73
        WRITEC  
        CONSTI  32
        WRITEC  
        CONSTI  69
        WRITEC  
        CONSTI  82
        WRITEC  
        CONSTI  82
        WRITEC  
        CONSTI  10
        WRITEC  

        STOP
